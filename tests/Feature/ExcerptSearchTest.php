<?php

namespace Tests\Feature;

use App\Http\Resources\AlbumResource;
use App\Http\Resources\ArtistResource;
use App\Http\Resources\PodcastResource;
use App\Http\Resources\SongResource;
use App\Models\Album;
use App\Models\Artist;
use App\Models\Podcast;
use App\Models\Song;
use PHPUnit\Framework\Attributes\Test;
use Tests\TestCase;

use function Tests\create_user;

class ExcerptSearchTest extends TestCase
{
    public function setUp(): void
    {
        parent::setUp();

        config()->set('scout.driver', 'collection');
    }

    protected function tearDown(): void
    {
        config()->set('scout.driver', null);

        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    #[Test]
    public function search(): void
    {
        $user = create_user();
        Song::factory()->for($user, 'owner')->create(['title' => 'Foo Song']);
        Song::factory()->create();

        Artist::factory()->for($user)->create(['name' => 'Foo Fighters']);
        Artist::factory()->create();

        Album::factory()->for($user)->create(['name' => 'Foo Number Five']);
        Album::factory()->create();

        Podcast::factory()->hasAttached($user, relationship: 'subscribers')->create(['title' => 'Foo Podcast']);

        $this->getAs('api/search?q=foo', $user)
            ->assertJsonStructure([
                'songs' => [0 => SongResource::JSON_STRUCTURE],
                'podcasts' => [0 => PodcastResource::JSON_STRUCTURE],
                'artists' => [0 => ArtistResource::JSON_STRUCTURE],
                'albums' => [0 => AlbumResource::JSON_STRUCTURE],
            ]);
    }
}
